import { useGetProjects } from ".generated/carbonmark-api-sdk/hooks/useGetProjects";
import { Project } from ".generated/carbonmark-api-sdk/types";
import { isStringArray } from "lib/utils/types.utils";
import { isEmpty, mapValues } from "lodash";
import { pipe } from "lodash/fp";
import { useRouter } from "next/router";
import { useEffect } from "react";

const joinArray = (value: string | string[]): string =>
  isStringArray(value) ? value.join(",") : value;

const emptyToUndefined = (value: string): string | undefined =>
  value === "" ? undefined : value;

export type ProjectsProps = {
  isLoading: boolean;
  isValidating: boolean;
  projects: Array<Project>;
};

/**
 * Unfortunately the SWR hooks generated by Kubb do not include params or config in the URL provided to `useSWR`
 * This is a problem because SWR does not build it's request keys using the params by default as react-query does.
 * The end result being that changes to params provided to the hook does not trigger a new fetch.
 *
 * This wrapper is a stopgap solution until we shift to react-query or the Kubb swr package is updated (perhaps by us)
 *
 * @note we may need to do the same for other generated hooks
 */
export const useFetchProjects = () => {
  const router = useRouter();

  const mappedParams = mapValues(
    router.query,
    pipe(joinArray, emptyToUndefined)
  );

  const projects = useGetProjects(mappedParams);

  useEffect(() => {
    if (!isEmpty(router.query)) {
      projects.mutate();
    }
  }, [router.query, projects.mutate]);

  return projects;
};
// @todo fixit
// import { useWeb3 } from "@klimadao/lib/utils";
// import { urls } from "lib/constants";
// import { fetcher } from "lib/fetcher";
// import { getProjectsQueryString } from "lib/getProjectsQueryString";
// import { Project } from "lib/types/carbonmark.types";
// import { isNil } from "lodash";
// import { negate } from "lodash/fp";
// import { useRouter } from "next/router";
// import { useEffect, useState } from "react";
// import useSWR, { mutate } from "swr";

// export const useFetchProjects = () => {
//   const router = useRouter();
//   const queryString = getProjectsQueryString(router.query);
//   const { networkLabel } = useWeb3();

//   const [currentNetwork, setCurrentNetwork] = useState(networkLabel);

//   useEffect(() => {
//     if (networkLabel && networkLabel !== currentNetwork) {
//       setCurrentNetwork(networkLabel);
//       const path = `${urls.api.projects}${queryString}${
//         queryString ? "&" : "?"
//       }network=${networkLabel}`;
//       mutate(path);
//     }
//   }, [networkLabel, queryString]);

//   const path = currentNetwork
//     ? `${urls.api.projects}${queryString}${
//         queryString ? "&" : "?"
//       }network=${currentNetwork}`
//     : null;

//   const { data, ...rest } = useSWR<Project[]>(path, fetcher, {
//     revalidateOnMount: true,
//   });

//   const projects = data?.filter(negate(isNil)) ?? [];
//   return { projects, ...rest };

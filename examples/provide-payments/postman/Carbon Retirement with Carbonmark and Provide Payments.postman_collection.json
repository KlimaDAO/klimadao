{
	"info": {
		"_postman_id": "23a90ffb-bfd3-4025-bbca-474ab0918a20",
		"name": "ECO API Starter - Carbon Retirement with Carbonmark",
		"description": "# Carbon Retirement with Carbonmark API\n\n### Pre-requisites\n\nCreate an account on [https://shuttle.provide.services.](https://shuttle.provide.services.) Be sure to create an organization. Additional steps to create a workgroup are optional.\n\nMaintain the shuttle_email and shuttle_password collection variables for the account you set up in Shuttle accordingly\n\n### API Flow\n\nExecute each API request in the following order. The additional collection variables needed will be populated as you successfully complete each HTTP request\n\n1. **Setup**\n    1. Authorize Access Token via Basic Auth\n    2. List organizations\n    3. Generate long-dated token\n    4. Get access token from refresh token\n    5. List Vaults\n    6. Get Vault wallet details\n2. **Generate Retirement Transaction Parameters. Choose a request type that best fits your requirement**\n    1. Retire By Specific Carbon Project\n    2. Retire By Given Dollar Amount\n    3. General Retirement\n3. **Sign transaction with Vault**\n4. **Broadcast retirement transaction**\n    \n\nOnce the \"setup\" requests are completed once - you can simply execute you \"get access token from refresh token\" then reiterate steps 2-4. Note the usage of the long-dated refresh token to generate access tokens as a API authentication technique.\n\nUpon completion of the final request - go to the link specified in the eco_cert_href collection variable.\n\nIt should be a link like this:\n\n[https://carbonmark.com/en/retirements/0x9ba09b7F79ccE9D45026DD02851dFaC948515b07/2](https://klimadao.finance/en/retirements/0x9ba09b7F79ccE9D45026DD02851dFaC948515b07/2)\n\n### Variable Customization\n\nYou can try retiring from other carbon pools by changing the eco_pool_token variable to one of the following carbon offset tokens on Polygon. For project specific retirements - add the relevant address to the eco_project_token variable.\n\n| **Token** | **Address** |\n| --- | --- |\n| Toucan BCT (Base Carbon Tonne) | 0x2f800db0fdb5223b3c3f354886d907a671414a7f  <br>  <br>For individual projects - see addresses listed  <br>[https://carbon.klimadao.finance/bct](https://carbon.klimadao.finance/nboTroubleshooting) |\n| Toucan NCT (Nature-based Carbon Tonne) | 0xD838290e877E0188a4A44700463419ED96c16107  <br>  <br>For individual projects - see addresses listed  <br>[https://carbon.klimadao.finance/nct](https://carbon.klimadao.finance/nboTroubleshooting) |\n| Moss MCO2 | 0x3aF556B48469D2398AB7BE1563a0cfd80ea4aC84 |\n| C3 UBO (Universal Base Offset) | 0x2b3ecb0991af0498ece9135bcd04013d7993110c  <br>  <br>For individual projects - see addresses listed [https://carbon.klimadao.finance/](https://carbon.klimadao.finance/nbo)ubo |\n| C3 NBO (Nature Base Offset) | 0x6bca3b77c1909ce1a4ba1a20d1103bde8d222e48  <br>  <br>For individual projects - see addresses listed [https://carbon.klimadao.finance/nbo](https://carbon.klimadao.finance/nboTroubleshooting) |\n\n### Troubleshooting tips\n\n- Use jwt.io to inspect refresh and access tokens (e.g. variables begin like ey1930...) for any authorization / authentication errors\n- Make sure the permissions attribute is set to 510 when generating the refresh token. If 0 or something else, double check the organization id and user id combination\n- For any authorization errors, check the access token in the authorization tab\n- Postman can goof up environment / collection variables. Make sure correct values are populated\n- Unable to sign the transaction? Your user may be missing the secp256k1 key. Try creating a new Shuttle user (especially if your shuttle account is old!)\n- Other issues or questions? Please contact [ryan@provide.services](mailto:ryan@provide.services)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22975745"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Authorize Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"console.log(response);",
									"",
									"//pm.collectionVariables.set(\"eco_refreshtoken\", response.token.refresh_token), (\"user_id\", response.user.id);",
									"pm.collectionVariables.set(\"eco_accesstoken\", response.token.access_token);",
									"pm.collectionVariables.set(\"eco_user_id\", response.user.id);",
									"",
									"pm.test(\"Permissions are 415\", function () {",
									"    pm.expect(response.token.permissions).to.eql(415);",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"uncsam0705@provide.service\", \n    \"password\": \"{{shuttle_password}}\"\n}"
						},
						"url": {
							"raw": "https://ident.provide.services/api/v1/authenticate",
							"protocol": "https",
							"host": [
								"ident",
								"provide",
								"services"
							],
							"path": [
								"api",
								"v1",
								"authenticate"
							]
						},
						"description": "Sends email & password to Ident. Token is retrieved and stored in environment variables as jwt_token"
					},
					"response": []
				},
				{
					"name": "List organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"eco_organizationid\", response[0].id );\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{eco_accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "authorization",
								"value": "bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "https://ident.provide.services/api/v1/organizations",
							"protocol": "https",
							"host": [
								"ident",
								"provide",
								"services"
							],
							"path": [
								"api",
								"v1",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "JWT Authenticate - Generate long-dated refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"eco_refreshtoken\", response.refresh_token );",
									"",
									"pm.test(\"Permissions are 510\", function () {",
									"    pm.expect(response.permissions).to.eql(510);",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{eco_accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "authorization",
								"value": "bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"scope\": \"offline_access\",\n    \"organization_id\" : \"{{eco_organizationid}}\",\n    \"user_id\" : \"{{eco_user_id}}\"\n}"
						},
						"url": {
							"raw": "https://ident.provide.services/api/v1/tokens",
							"protocol": "https",
							"host": [
								"ident",
								"provide",
								"services"
							],
							"path": [
								"api",
								"v1",
								"tokens"
							]
						},
						"description": "Returns an authorized JSON formatted JWT with an `offline-access` scoped long-term `access_token` that serves as authentication for `User`, `Organization`, and `Application` related requests.\n\nTo authorize an `Application` token, replace `organization_id` in this example with `application_id`\n\nTo authorize a `User` token, replace `organization_id` with `user_id`\n\nNeed help finding your organization id?\n\nRun the \"List organizations\" request in the Helper folder. This will automatically save id to your eco_organizationid collection variable.\n\n<img src=\"https://content.pstmn.io/fb9ecae9-0f07-4e2c-99d9-5da2b07f630f/aW1hZ2UucG5n\" alt=\"\" height=\"280\" width=\"870\">\n\nOr you can find by logging into the PRVD CLI\n\n<img src=\"https://content.pstmn.io/7d2115dd-a795-4465-95b7-ed1ab4193c57/aW1hZ2UucG5n\" width=\"764\" height=\"168\">\n\nOr find it in Shuttle with dev tools open\n\n<img src=\"https://content.pstmn.io/6a19c2c1-b62e-4c48-904b-1bd1a02679b4/aW1hZ2UucG5n\" width=\"647\" height=\"121\">"
					},
					"response": []
				},
				{
					"name": "JWT Authenticate - Get access token from refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"eco_accesstoken\", response.access_token );",
									"",
									"pm.test(\"Permissions are 510\", function () {",
									"    pm.expect(response.permissions).to.eql(510);",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{eco_refreshtoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "authorization",
								"value": "bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organization_id\": \"{{eco_organizationid}}\",\n    \"user_id\" : \"{{eco_user_id}}\"\n}"
						},
						"url": {
							"raw": "https://ident.provide.services/api/v1/tokens",
							"protocol": "https",
							"host": [
								"ident",
								"provide",
								"services"
							],
							"path": [
								"api",
								"v1",
								"tokens"
							]
						},
						"description": "Returns an authorized JSON formatted JWT with an `offline-access` scoped long-term `access_token` that serves as authentication for `User`, `Organization`, and `Application` related requests. \n\nTo authorize an `Application` token, replace `organization_id` in this example with `application_id`\n\nTo authorize a `User` token, replace `organization_id` with `user_id`"
					},
					"response": []
				},
				{
					"name": "List Vaults",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"eco_uservault_id\", response[0].id );\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{eco_accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "https://vault.provide.services/api/v1/vaults",
							"protocol": "https",
							"host": [
								"vault",
								"provide",
								"services"
							],
							"path": [
								"api",
								"v1",
								"vaults"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Vault wallet details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"var key_id;\r",
									"var wallet;\r",
									"\r",
									"var vaultkeys = response.filter( vaultkeys => vaultkeys.spec === \"secp256k1\" );\r",
									"\r",
									"pm.test(\"Have a key for EVM\", function () {\r",
									"    vaultkeys.to.have.length > 0;\r",
									"});\r",
									"\r",
									"if(vaultkeys.length > 0) {\r",
									"key_id = vaultkeys[0].id;\r",
									"wallet = vaultkeys[0].address;\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"eco_uservault_key_id\", key_id );\r",
									"pm.collectionVariables.set(\"eco_uservault_wallet\", wallet);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{eco_accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "https://vault.provide.services/api/v1/vaults/{{eco_uservault_id}}/keys",
							"protocol": "https",
							"host": [
								"vault",
								"provide",
								"services"
							],
							"path": [
								"api",
								"v1",
								"vaults",
								"{{eco_uservault_id}}",
								"keys"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Retire By Specific Carbon Project",
			"item": [
				{
					"name": "Generate Retirement Transaction Parameters - Specific Carbon Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"var paramsdata;\r",
									"var hashedparamsdata;\r",
									"var retirementreqid;\r",
									"\r",
									"paramsdata = response.data;\r",
									"hashedparamsdata = response.hashed_data;\r",
									"retirementreqid = response.id;\r",
									"\r",
									"pm.collectionVariables.set(\"eco_paramsdata\", paramsdata );\r",
									"pm.collectionVariables.set(\"eco_hashedparamsdata\", hashedparamsdata);\r",
									"pm.collectionVariables.set(\"eco_retirereq_id\", retirementreqid);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{eco_accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"network_id\" : \"{{eco_prvd_network_id}}\",\r\n    \"description\" : \"{{eco_retirement_desc}}\",                   \r\n    \"value\"   : 0.0233,\r\n    \"max_source_bid\" : 0.11,\r\n    \"source_token_contract_address\" : \"{{eco_source_token}}\",\r\n    \"pool_token_contract_address\"  : \"{{eco_pool_token}}\",\r\n    \"project_token_contract_address\" : \"{{eco_project_token}}\",\r\n    \"beneficiary_address\" : \"{{eco_uservault_wallet}}\",\r\n    \"beneficiary_name\" : \"{{eco_beneficiary}}\",\r\n    \"retirement_message\" : \"{{eco_retirement_msg}}\",\r\n    \"retire_by\" : \"carbon\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.providepayments.com/api/v1/eco/retire_carbon_requests",
							"protocol": "https",
							"host": [
								"api",
								"providepayments",
								"com"
							],
							"path": [
								"api",
								"v1",
								"eco",
								"retire_carbon_requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test - Generate Retirement Transaction Parameters - Specific Carbon Project Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"var paramsdata;\r",
									"var hashedparamsdata;\r",
									"var retirementreqid;\r",
									"\r",
									"paramsdata = response.data;\r",
									"hashedparamsdata = response.hashed_data;\r",
									"retirementreqid = response.retirementreqid;\r",
									"\r",
									"pm.collectionVariables.set(\"eco_paramsdata\", paramsdata );\r",
									"pm.collectionVariables.set(\"eco_hashedparamsdata\", hashedparamsdata);\r",
									"pm.collectionVariables.set(\"eco_retirereq_id\", retirementreqid);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{eco_accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"network_id\" : \"{{eco_prvd_network_id}}\",\r\n    \"description\" : \"{{eco_retirement_desc}}\",                   \r\n    \"value\"   : 0.0733,\r\n    \"source_token_contract_address\" : \"{{eco_source_token}}\",\r\n    \"pool_token_contract_address\"  : \"{{eco_pool_token}}\",\r\n    \"project_token_contract_address\" : \"{{eco_project_token}}\",\r\n    \"beneficiary_address\" : \"{{eco_uservault_wallet}}\",\r\n    \"beneficiary_name\" : \"{{eco_beneficiary}}\",\r\n    \"retirement_message\" : \"{{eco_retirement_msg}}\",\r\n    \"retire_by\" : \"carbon\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.providepayments.com/api/v1/eco/retire_carbon_requests",
							"protocol": "https",
							"host": [
								"api",
								"providepayments",
								"com"
							],
							"path": [
								"api",
								"v1",
								"eco",
								"retire_carbon_requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test - Generate Retirement Transaction Parameters - Specific Carbon Project Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"var paramsdata;\r",
									"var hashedparamsdata;\r",
									"var retirementreqid;\r",
									"\r",
									"paramsdata = response.data;\r",
									"hashedparamsdata = response.hashed_data;\r",
									"retirementreqid = response.retirementreqid;\r",
									"\r",
									"pm.collectionVariables.set(\"eco_paramsdata\", paramsdata );\r",
									"pm.collectionVariables.set(\"eco_hashedparamsdata\", hashedparamsdata);\r",
									"pm.collectionVariables.set(\"eco_retirereq_id\", retirementreqid);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{eco_accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"network_id\" : \"{{eco_prvd_network_id}}\",\r\n    \"description\" : \"{{eco_retirement_desc}}\",                   \r\n    \"value\"   : 0.0733,\r\n    \"source_token_contract_address\" : \"{{eco_source_token}}\",\r\n    \"pool_token_contract_address\"  : \"{{eco_pool_token}}\",\r\n    \"project_token_contract_address\" : \"{{eco_project_token}}\",\r\n    \"beneficiary_address\" : \"{{eco_uservault_wallet}}\",\r\n    \"beneficiary_name\" : \"{{eco_beneficiary}}\",\r\n    \"retirement_message\" : \"{{eco_retirement_msg}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.providepayments.com/api/v1/eco/retire_carbon_requests",
							"protocol": "https",
							"host": [
								"api",
								"providepayments",
								"com"
							],
							"path": [
								"api",
								"v1",
								"eco",
								"retire_carbon_requests"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Retire By Given Dollar Amount",
			"item": [
				{
					"name": "Generate Retirement Transaction Parameters - By Dollar Amount $1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"var paramsdata;\r",
									"var hashedparamsdata;\r",
									"var retirementreqid;\r",
									"\r",
									"paramsdata = response.data;\r",
									"hashedparamsdata = response.hashed_data;\r",
									"retirementreqid = response.id;\r",
									"\r",
									"pm.collectionVariables.set(\"eco_paramsdata\", paramsdata );\r",
									"pm.collectionVariables.set(\"eco_hashedparamsdata\", hashedparamsdata);\r",
									"pm.collectionVariables.set(\"eco_retirereq_id\", retirementreqid);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{eco_accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"network_id\" : \"{{eco_prvd_network_id}}\",\r\n    \"description\" : \"{{eco_retirement_desc}}\",                   \r\n    \"value\"   : 0.06,\r\n    \"source_token_contract_address\" : \"{{eco_source_token}}\",\r\n    \"pool_token_contract_address\"  : \"{{eco_pool_token}}\",\r\n    \"beneficiary_address\" : \"{{eco_uservault_wallet}}\",\r\n    \"beneficiary_name\" : \"{{eco_beneficiary}}\",\r\n    \"retirement_message\" : \"{{eco_retirement_msg}}\",\r\n    \"retire_by\" : \"source\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.providepayments.com/api/v1/eco/retire_carbon_requests",
							"protocol": "https",
							"host": [
								"api",
								"providepayments",
								"com"
							],
							"path": [
								"api",
								"v1",
								"eco",
								"retire_carbon_requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Retirement Transaction Parameters - By Dollar Amount in specific project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"var paramsdata;\r",
									"var hashedparamsdata;\r",
									"var retirementreqid;\r",
									"\r",
									"paramsdata = response.data;\r",
									"hashedparamsdata = response.hashed_data;\r",
									"retirementreqid = response.id;\r",
									"\r",
									"pm.collectionVariables.set(\"eco_paramsdata\", paramsdata );\r",
									"pm.collectionVariables.set(\"eco_hashedparamsdata\", hashedparamsdata);\r",
									"pm.collectionVariables.set(\"eco_retirereq_id\", retirementreqid);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{eco_accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"network_id\" : \"{{eco_prvd_network_id}}\",\r\n    \"description\" : \"{{eco_retirement_desc}}\",                   \r\n    \"value\"   : 0.05,\r\n    \"source_token_contract_address\" : \"{{eco_source_token}}\",\r\n    \"pool_token_contract_address\"  : \"{{eco_pool_token}}\",\r\n    \"project_token_contract_address\" : \"{{eco_project_token}}\",\r\n    \"beneficiary_address\" : \"{{eco_uservault_wallet}}\",\r\n    \"beneficiary_name\" : \"{{eco_beneficiary}}\",\r\n    \"retirement_message\" : \"{{eco_retirement_msg}}\",\r\n    \"retire_by\" : \"source\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.providepayments.com/api/v1/eco/retire_carbon_requests",
							"protocol": "https",
							"host": [
								"api",
								"providepayments",
								"com"
							],
							"path": [
								"api",
								"v1",
								"eco",
								"retire_carbon_requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative test - Generate Retirement Transaction Parameters - By Dollar Amount $1 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"var paramsdata;\r",
									"var hashedparamsdata;\r",
									"var retirementreqid;\r",
									"\r",
									"paramsdata = response.data;\r",
									"hashedparamsdata = response.hashed_data;\r",
									"retirementreqid = response.retirementreqid;\r",
									"\r",
									"pm.collectionVariables.set(\"eco_paramsdata\", paramsdata );\r",
									"pm.collectionVariables.set(\"eco_hashedparamsdata\", hashedparamsdata);\r",
									"pm.collectionVariables.set(\"eco_retirereq_id\", retirementreqid);\r",
									"\r",
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{eco_accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"network_id\" : \"{{eco_prvd_network_id}}\",\r\n    \"description\" : \"{{eco_retirement_desc}}\",                   \r\n    \"value\"   : 1.00,\r\n    \"max_source_bid\" : 1.00,\r\n    \"source_token_contract_address\" : \"{{eco_source_token}}\",\r\n    \"pool_token_contract_address\"  : \"{{eco_pool_token}}\",\r\n    \"beneficiary_address\" : \"{{eco_uservault_wallet}}\",\r\n    \"beneficiary_name\" : \"{{eco_beneficiary}}\",\r\n    \"retirement_message\" : \"{{eco_retirement_msg}}\",\r\n    \"retire_by\" : \"source\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.providepayments.com/api/v1/eco/retire_carbon_requests",
							"protocol": "https",
							"host": [
								"api",
								"providepayments",
								"com"
							],
							"path": [
								"api",
								"v1",
								"eco",
								"retire_carbon_requests"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "General Retirement",
			"item": []
		},
		{
			"name": "Generate Retirement Transaction Parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"var paramsdata;\r",
							"var hashedparamsdata;\r",
							"var retirementreqid;\r",
							"\r",
							"paramsdata = response.data;\r",
							"hashedparamsdata = response.hashed_data;\r",
							"retirementreqid = response.id;\r",
							"\r",
							"pm.collectionVariables.set(\"eco_paramsdata\", paramsdata );\r",
							"pm.collectionVariables.set(\"eco_hashedparamsdata\", hashedparamsdata);\r",
							"pm.collectionVariables.set(\"eco_retirereq_id\", retirementreqid);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{eco_accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"network_id\" : \"{{eco_prvd_network_id}}\",\r\n    \"description\" : \"{{eco_retirement_desc}}\",                   \r\n    \"value\"   : 0.0075,\r\n    \"source_token_contract_address\" : \"{{eco_source_token}}\",\r\n    \"pool_token_contract_address\"  : \"{{eco_pool_token}}\",\r\n    \"beneficiary_address\" : \"{{eco_uservault_wallet}}\",\r\n    \"beneficiary_name\" : \"{{eco_beneficiary}}\",\r\n    \"retirement_message\" : \"{{eco_retirement_msg}}\"  \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.providepayments.com/api/v1/eco/retire_carbon_requests",
					"protocol": "https",
					"host": [
						"api",
						"providepayments",
						"com"
					],
					"path": [
						"api",
						"v1",
						"eco",
						"retire_carbon_requests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate Retirement Transaction Parameters Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"var paramsdata;\r",
							"var hashedparamsdata;\r",
							"var retirementreqid;\r",
							"\r",
							"paramsdata = response.data;\r",
							"hashedparamsdata = response.hashed_data;\r",
							"retirementreqid = response.id;\r",
							"\r",
							"pm.collectionVariables.set(\"eco_paramsdata\", paramsdata );\r",
							"pm.collectionVariables.set(\"eco_hashedparamsdata\", hashedparamsdata);\r",
							"pm.collectionVariables.set(\"eco_retirereq_id\", retirementreqid);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{eco_accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"network_id\" : \"{{eco_prvd_network_id}}\",\r\n    \"description\" : \"{{eco_retirement_desc}}\",                   \r\n    \"value\"   : 0.0075,\r\n    \"source_token_contract_address\" : \"{{eco_source_token}}\",\r\n    \"pool_token_contract_address\"  : \"{{eco_pool_token}}\",\r\n    \"beneficiary_address\" : \"{{eco_uservault_wallet}}\",\r\n    \"beneficiary_name\" : \"{{eco_beneficiary}}\",\r\n    \"retirement_message\" : \"{{eco_retirement_msg}}\",\r\n    \"retire_by\" : \"carbon\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.providepayments.com/api/v1/eco/retire_carbon_requests",
					"protocol": "https",
					"host": [
						"api",
						"providepayments",
						"com"
					],
					"path": [
						"api",
						"v1",
						"eco",
						"retire_carbon_requests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign transaction with Vault",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"var signeddata;\r",
							"\r",
							"signeddata = response.signature;\r",
							"\r",
							"pm.collectionVariables.set(\"eco_signeddata\", signeddata);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{eco_accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"message\" : \"{{eco_hashedparamsdata}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://vault.provide.services/api/v1/vaults/{{eco_uservault_id}}/keys/{{eco_uservault_key_id}}/sign",
					"protocol": "https",
					"host": [
						"vault",
						"provide",
						"services"
					],
					"path": [
						"api",
						"v1",
						"vaults",
						"{{eco_uservault_id}}",
						"keys",
						"{{eco_uservault_key_id}}",
						"sign"
					]
				}
			},
			"response": []
		},
		{
			"name": "Broadcast retirement transaction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"var cert_href;\r",
							"\r",
							"cert_href = response.signature;\r",
							"\r",
							"pm.collectionVariables.set(\"eco_cert_href\", cert_href);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{eco_accesstoken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n           \"data\" : \"{{eco_paramsdata}}\",\r\n           \"request_id\" : \"{{eco_retirereq_id}}\",\r\n           \"signature\"  : \"{{eco_signeddata}}\",\r\n           \"signer\"    : \"{{eco_uservault_wallet}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.providepayments.com/api/v1/eco/retire_carbon_requests/{{eco_retirereq_id}}/retire",
					"protocol": "https",
					"host": [
						"api",
						"providepayments",
						"com"
					],
					"path": [
						"api",
						"v1",
						"eco",
						"retire_carbon_requests",
						"{{eco_retirereq_id}}",
						"retire"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "eco_accesstoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "eco_refreshtoken",
			"value": "",
			"type": "string"
		},
		{
			"key": "eco_uservault_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "eco_uservault_key_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "eco_retirereq_id",
			"value": ""
		},
		{
			"key": "eco_user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "eco_organizationid",
			"value": "",
			"type": "string"
		},
		{
			"key": "eco_uservault_wallet",
			"value": "",
			"type": "string"
		},
		{
			"key": "eco_retirement_msg",
			"value": "",
			"type": "string"
		},
		{
			"key": "eco_beneficiary",
			"value": "",
			"type": "string"
		},
		{
			"key": "eco_source_token",
			"value": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
			"type": "string"
		},
		{
			"key": "eco_pool_token",
			"value": "0x2f800db0fdb5223b3c3f354886d907a671414a7f",
			"type": "string"
		},
		{
			"key": "eco_prvd_network_id",
			"value": "2fd61fde-5031-41f1-86b8-8a72e2945ead",
			"type": "string"
		},
		{
			"key": "eco_retirement_desc",
			"value": "",
			"type": "string"
		},
		{
			"key": "eco_paramsdata",
			"value": "",
			"type": "string"
		},
		{
			"key": "eco_hashedparamsdata",
			"value": "",
			"type": "string"
		},
		{
			"key": "eco_signeddata",
			"value": ""
		},
		{
			"key": "eco_cert_href",
			"value": "https://klimadao.finance/en/retirements/0x9ba09b7F79ccE9D45026DD02851dFaC948515b07/2",
			"type": "string"
		},
		{
			"key": "shuttle_email",
			"value": "",
			"type": "string"
		},
		{
			"key": "shuttle_password",
			"value": "",
			"type": "string"
		},
		{
			"key": "eco_project_token",
			"value": "",
			"type": "string"
		}
	]
}
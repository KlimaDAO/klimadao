import { useGetProjects } from ".generated/carbonmark-api-sdk/hooks/useGetProjects";
import { Def1, Project } from ".generated/carbonmark-api-sdk/types";
import { useWeb3 } from "@klimadao/lib/utils";
import { isStringArray } from "lib/utils/types.utils";
import { isEmpty, mapValues } from "lodash";
import { pipe } from "lodash/fp";
import { useRouter } from "next/router";
import { useEffect } from "react";

const joinArray = (value: string | string[]): string =>
  isStringArray(value) ? value.join(",") : value;

const emptyToUndefined = (value: string): string | undefined =>
  value === "" ? undefined : value;

export type ProjectsProps = {
  isLoading: boolean;
  isValidating: boolean;
  projects: Array<Project>;
};

function castToDef1(networkLabel: string | undefined): Def1 | undefined {
  if (networkLabel === "polygon") {
    return "polygon";
  } else if (networkLabel === "mumbai") {
    return "mumbai";
  } else {
    return undefined;
  }
}

/**
 * Unfortunately the SWR hooks generated by Kubb do not include params or config in the URL provided to `useSWR`
 * This is a problem because SWR does not build it's request keys using the params by default as react-query does.
 * The end result being that changes to params provided to the hook does not trigger a new fetch.
 *
 * This wrapper is a stopgap solution until we shift to react-query or the Kubb swr package is updated (perhaps by us)
 *
 * @note we may need to do the same for other generated hooks
 */
export const useFetchProjects = () => {
  const router = useRouter();
  const { networkLabel } = useWeb3();

  const mappedParams = mapValues(
    { ...router.query, network: castToDef1(networkLabel) },
    pipe(joinArray, emptyToUndefined)
  );

  const projects = useGetProjects(mappedParams);

  useEffect(() => {
    if (!isEmpty(router.query)) {
      projects.mutate();
    }
  }, [router.query, projects.mutate]);

  return projects;
};

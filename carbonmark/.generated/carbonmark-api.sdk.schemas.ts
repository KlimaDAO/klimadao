/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * Carbonmark REST API
 * 
Welcome to the API Reference docs for **version 2.0.0-6** of the Carbonmark REST API. Use this API to view assets, prices, supply, activity and more.
## Quick start
Be sure to prefix a version number, otherwise your application will be exposed to breaking changes.

~~~ts
const res = await fetch("https://v1.api.carbonmark.com/projects");
const projects = await res.json();
~~~

For a developer guides and example implementations, or to learn more about Carbonmark and Digital Carbon Market, view our product knowledge base at <a href="https://docs.carbonmark.com">docs.carbonmark.com</a>.
## 

 * OpenAPI spec version: 2.0.0-6
 */
export type PostUsersLoginVerify200 = {
  token: string;
};

export type PostUsersLoginVerifyBody = {
  wallet: string;
  signature: string;
};

export type PostUsersLogin200 = {
  nonce: string;
};

export type PostUsersLoginBody = {
  wallet: string;
};

export type GetPurchasesId200ListingProject = {
  country: string;
  key: string;
  methodology: string;
  name: string;
  projectID: string;
  vintage: string;
};

export type GetPurchasesId200Listing = {
  /** ID of the listing that was purchased */
  id: string;
  project: GetPurchasesId200ListingProject;
};

export type GetPurchasesId200 = {
  /** ID (transaction hash) of the purchase */
  id: string;
  /** Quantity of credits purchased */
  amount: string;
  listing: GetPurchasesId200Listing;
  /** Total purchase price (USDC) */
  price: string;
};

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetPurchasesIdNetwork = {  polygon: 'polygon',
  mumbai: 'mumbai',
} as const;

export type GetPurchasesIdParams = {
/**
 * Optional. Desired blockchain network. Default is `polygon` (mainnet).
 */
network?: typeof GetPurchasesIdNetwork[keyof typeof GetPurchasesIdNetwork] ;


};

export type GetProjectsId200Stats = {
  totalBridged: number;
  totalRetired: number;
  totalSupply: number;
};

export type GetProjectsId200Url = string | null;

export type GetProjectsId200ShortDescription = string | null;

export type GetProjectsId200LongDescription = string | null;

export type GetProjectsId200 = {
  key: string;
  projectID?: GetProjectsId200ProjectID;
  name?: GetProjectsId200Name;
  registry?: GetProjectsId200Registry;
  country?: GetProjectsId200Country;
  description?: GetProjectsId200Description;
  location?: GetProjectsId200Location;
  methodologies?: GetProjectsId200Methodologies;
  images: GetProjectsId200ImagesItem[];
  long_description?: GetProjectsId200LongDescription;
  short_description?: GetProjectsId200ShortDescription;
  url?: GetProjectsId200Url;
  stats: GetProjectsId200Stats;
  prices: GetProjectsId200PricesItem[];
  listings: GetProjectsId200ListingsItem[];
  activities: GetProjectsId200ActivitiesItem[];
  price: string;
  vintage: string;
};

export type GetProjectsId200ActivitiesItemBuyerAnyOfHandle = string | null;

export type GetProjectsId200ActivitiesItemBuyerAnyOf = {
  id: string;
  handle?: GetProjectsId200ActivitiesItemBuyerAnyOfHandle;
};

export type GetProjectsId200ActivitiesItemBuyer = GetProjectsId200ActivitiesItemBuyerAnyOf | null;

export type GetProjectsId200ActivitiesItemSellerAnyOfHandle = string | null;

export type GetProjectsId200ActivitiesItemSellerAnyOf = {
  id: string;
  handle?: GetProjectsId200ActivitiesItemSellerAnyOfHandle;
};

export type GetProjectsId200ActivitiesItemSeller = GetProjectsId200ActivitiesItemSellerAnyOf | null;

export type GetProjectsId200ActivitiesItemActivityType = string | null;

export type GetProjectsId200ActivitiesItemTimeStamp = string | null;

export type GetProjectsId200ActivitiesItemPreviousPrice = string | null;

export type GetProjectsId200ActivitiesItemPrice = string | null;

export type GetProjectsId200ActivitiesItemPreviousAmount = string | null;

export type GetProjectsId200ActivitiesItemAmount = string | null;

export type GetProjectsId200ActivitiesItem = {
  id: string;
  amount?: GetProjectsId200ActivitiesItemAmount;
  previousAmount?: GetProjectsId200ActivitiesItemPreviousAmount;
  price?: GetProjectsId200ActivitiesItemPrice;
  previousPrice?: GetProjectsId200ActivitiesItemPreviousPrice;
  timeStamp?: GetProjectsId200ActivitiesItemTimeStamp;
  activityType?: GetProjectsId200ActivitiesItemActivityType;
  seller?: GetProjectsId200ActivitiesItemSeller;
  buyer?: GetProjectsId200ActivitiesItemBuyer;
};

export type GetProjectsId200ListingsItemProject = {
  id: string;
  key: string;
  vintage: string;
  name: string;
  category: string;
  country: string;
  methodology: string;
};

export type GetProjectsId200ListingsItemSellerProfileImgUrl = string | null;

export type GetProjectsId200ListingsItemSellerDescription = string | null;

export type GetProjectsId200ListingsItemSellerUsername = string | null;

export type GetProjectsId200ListingsItemSellerHandle = string | null;

export type GetProjectsId200ListingsItemSeller = {
  handle?: GetProjectsId200ListingsItemSellerHandle;
  username?: GetProjectsId200ListingsItemSellerUsername;
  description?: GetProjectsId200ListingsItemSellerDescription;
  profileImgUrl?: GetProjectsId200ListingsItemSellerProfileImgUrl;
  id: string;
};

export type GetProjectsId200ListingsItemUpdatedAt = string | null;

export type GetProjectsId200ListingsItemCreatedAt = string | null;

export type GetProjectsId200ListingsItemBatchPrices = string[] | null;

export type GetProjectsId200ListingsItemBatches = string[] | null;

export type GetProjectsId200ListingsItemDeleted = boolean | null;

export type GetProjectsId200ListingsItemActive = boolean | null;

/**
 * Marketplace listing with per-tonne price and project info.
 */
export type GetProjectsId200ListingsItem = {
  /** Unique listing identifier */
  id: string;
  /** Remaining supply. Unformatted 18 decimal string */
  leftToSell: string;
  /** Address of the asset being sold */
  tokenAddress: string;
  /** USDC price per tonne. Unformatted 6 decimal string. e.g. 1000000 */
  singleUnitPrice: string;
  totalAmountToSell: string;
  active?: GetProjectsId200ListingsItemActive;
  deleted?: GetProjectsId200ListingsItemDeleted;
  batches?: GetProjectsId200ListingsItemBatches;
  batchPrices?: GetProjectsId200ListingsItemBatchPrices;
  createdAt?: GetProjectsId200ListingsItemCreatedAt;
  updatedAt?: GetProjectsId200ListingsItemUpdatedAt;
  seller: GetProjectsId200ListingsItemSeller;
  /** Unix Timestamp (seconds) when the listing expires. */
  expiration: string;
  /** Minimum quantity for purchase transaction to succeed. */
  minFillAmount: string;
  project: GetProjectsId200ListingsItemProject;
};

/**
 * Lowercase name of pool / pool token e.g. 'bct'
 */
export type GetProjectsId200PricesItemPoolName = typeof GetProjectsId200PricesItemPoolName[keyof typeof GetProjectsId200PricesItemPoolName] ;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProjectsId200PricesItemPoolName = {  ubo: 'ubo',
  nbo: 'nbo',
  bct: 'bct',
  nct: 'nct',
} as const;

export type GetProjectsId200PricesItem = {
  /** Lowercase name of pool / pool token e.g. 'bct' */
  poolName: GetProjectsId200PricesItemPoolName;
  /** Remaining supply in pool */
  supply: string;
  /** Address of the pool itself, e.g. bct token address */
  poolAddress: boolean;
  /** Address of the project token in this pool */
  projectTokenAddress: string;
  /** True if default project for pool and no selective redemption fee applies */
  isPoolDefault: boolean;
  /** formatted USDC price for 1 tonne e.g. '0.123456' */
  singleUnitPrice: string;
};

export type GetProjectsId200ImagesItemUrl = string | null;

export type GetProjectsId200ImagesItemCaption = string | null;

export type GetProjectsId200ImagesItem = {
  caption?: GetProjectsId200ImagesItemCaption;
  url?: GetProjectsId200ImagesItemUrl;
};

export type GetProjectsId200Methodologies = GetProjectsId200MethodologiesAnyOfItem[] | null;

export type GetProjectsId200MethodologiesAnyOfItemAnyOfName = string | null;

export type GetProjectsId200MethodologiesAnyOfItemAnyOfCategory = string | null;

export type GetProjectsId200MethodologiesAnyOfItemAnyOfId = string | null;

export type GetProjectsId200MethodologiesAnyOfItemAnyOf = {
  id?: GetProjectsId200MethodologiesAnyOfItemAnyOfId;
  category?: GetProjectsId200MethodologiesAnyOfItemAnyOfCategory;
  name?: GetProjectsId200MethodologiesAnyOfItemAnyOfName;
};

export type GetProjectsId200MethodologiesAnyOfItem = GetProjectsId200MethodologiesAnyOfItemAnyOf | null;

export type GetProjectsId200Location = GetProjectsId200LocationAnyOf | null;

export type GetProjectsId200LocationAnyOfGeometryType = typeof GetProjectsId200LocationAnyOfGeometryType[keyof typeof GetProjectsId200LocationAnyOfGeometryType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProjectsId200LocationAnyOfGeometryType = {
  Point: 'Point',
} as const;

export type GetProjectsId200LocationAnyOfGeometry = {
  type: GetProjectsId200LocationAnyOfGeometryType;
  coordinates: number[];
};

export type GetProjectsId200LocationAnyOfType = typeof GetProjectsId200LocationAnyOfType[keyof typeof GetProjectsId200LocationAnyOfType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProjectsId200LocationAnyOfType = {
  Feature: 'Feature',
} as const;

export type GetProjectsId200LocationAnyOf = {
  type: GetProjectsId200LocationAnyOfType;
  geometry: GetProjectsId200LocationAnyOfGeometry;
};

export type GetProjectsId200Description = string | null;

export type GetProjectsId200Country = string | null;

export type GetProjectsId200Registry = string | null;

export type GetProjectsId200Name = string | null;

export type GetProjectsId200ProjectID = string | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProjectsIdNetwork = {  polygon: 'polygon',
  mumbai: 'mumbai',
} as const;
export type GetProjectsIdParams = {
/**
 * Only return projects listings that expire after this timestamp (Unix seconds)
 */
expiresAfter?: string;
/**
 * Optional. Desired blockchain network. Default is `polygon` (mainnet).
 */
network?: typeof GetProjectsIdNetwork[keyof typeof GetProjectsIdNetwork] ;


};

export type PutUsersWallet200 = {
  wallet: string;
  username: string;
  description: string;
  profileImgUrl?: string;
};

export type PutUsersWalletBody = {
  wallet: string;
  username: string;
  description: string;
  profileImgUrl?: string;
};

export type PostUsers403 = {
  error: string;
};

export type PostUsers200ProfileImgUrl = string | null;

export type PostUsers200Description = string | null;

export type PostUsers200 = {
  handle: string;
  username: string;
  wallet: string;
  description?: PostUsers200Description;
  profileImgUrl?: PostUsers200ProfileImgUrl;
};

export type PostUsersBodyProfileImgUrl = string | null;

export type PostUsersBodyDescription = string | null;

export type PostUsersBody = {
  handle: string;
  username: string;
  wallet: string;
  description?: PostUsersBodyDescription;
  profileImgUrl?: PostUsersBodyProfileImgUrl;
};

export type GetUsersWalletOrHandle200AssetsItemToken = {
  id: string;
  name: string;
  symbol: string;
  decimals: number;
};

export type GetUsersWalletOrHandle200AssetsItem = {
  id: string;
  token: GetUsersWalletOrHandle200AssetsItemToken;
  amount: string;
};

export type GetUsersWalletOrHandle200ActivitiesItem = {
  id: string;
  amount?: GetUsersWalletOrHandle200ActivitiesItemAmount;
  previousAmount?: GetUsersWalletOrHandle200ActivitiesItemPreviousAmount;
  price?: GetUsersWalletOrHandle200ActivitiesItemPrice;
  previousPrice?: GetUsersWalletOrHandle200ActivitiesItemPreviousPrice;
  timeStamp?: GetUsersWalletOrHandle200ActivitiesItemTimeStamp;
  activityType?: GetUsersWalletOrHandle200ActivitiesItemActivityType;
  seller?: GetUsersWalletOrHandle200ActivitiesItemSeller;
  buyer?: GetUsersWalletOrHandle200ActivitiesItemBuyer;
};

export type GetUsersWalletOrHandle200 = {
  handle?: GetUsersWalletOrHandle200Handle;
  username: string;
  description?: GetUsersWalletOrHandle200Description;
  profileImgUrl?: GetUsersWalletOrHandle200ProfileImgUrl;
  updatedAt: number;
  createdAt: number;
  wallet: string;
  listings: GetUsersWalletOrHandle200ListingsItem[];
  activities: GetUsersWalletOrHandle200ActivitiesItem[];
  assets: GetUsersWalletOrHandle200AssetsItem[];
};

export type GetUsersWalletOrHandle200ActivitiesItemBuyerAnyOfHandle = string | null;

export type GetUsersWalletOrHandle200ActivitiesItemBuyerAnyOf = {
  id: string;
  handle?: GetUsersWalletOrHandle200ActivitiesItemBuyerAnyOfHandle;
};

export type GetUsersWalletOrHandle200ActivitiesItemBuyer = GetUsersWalletOrHandle200ActivitiesItemBuyerAnyOf | null;

export type GetUsersWalletOrHandle200ActivitiesItemSellerAnyOfHandle = string | null;

export type GetUsersWalletOrHandle200ActivitiesItemSellerAnyOf = {
  id: string;
  handle?: GetUsersWalletOrHandle200ActivitiesItemSellerAnyOfHandle;
};

export type GetUsersWalletOrHandle200ActivitiesItemSeller = GetUsersWalletOrHandle200ActivitiesItemSellerAnyOf | null;

export type GetUsersWalletOrHandle200ActivitiesItemActivityType = string | null;

export type GetUsersWalletOrHandle200ActivitiesItemTimeStamp = string | null;

export type GetUsersWalletOrHandle200ActivitiesItemPreviousPrice = string | null;

export type GetUsersWalletOrHandle200ActivitiesItemPrice = string | null;

export type GetUsersWalletOrHandle200ActivitiesItemPreviousAmount = string | null;

export type GetUsersWalletOrHandle200ActivitiesItemAmount = string | null;

export type GetUsersWalletOrHandle200ListingsItemProject = {
  id: string;
  key: string;
  vintage: string;
  name: string;
  category: string;
  country: string;
  methodology: string;
};

export type GetUsersWalletOrHandle200ListingsItemSellerProfileImgUrl = string | null;

export type GetUsersWalletOrHandle200ListingsItemSellerDescription = string | null;

export type GetUsersWalletOrHandle200ListingsItemSellerUsername = string | null;

export type GetUsersWalletOrHandle200ListingsItemSellerHandle = string | null;

export type GetUsersWalletOrHandle200ListingsItemSeller = {
  handle?: GetUsersWalletOrHandle200ListingsItemSellerHandle;
  username?: GetUsersWalletOrHandle200ListingsItemSellerUsername;
  description?: GetUsersWalletOrHandle200ListingsItemSellerDescription;
  profileImgUrl?: GetUsersWalletOrHandle200ListingsItemSellerProfileImgUrl;
  id: string;
};

export type GetUsersWalletOrHandle200ListingsItemUpdatedAt = string | null;

export type GetUsersWalletOrHandle200ListingsItemCreatedAt = string | null;

export type GetUsersWalletOrHandle200ListingsItemBatchPrices = string[] | null;

export type GetUsersWalletOrHandle200ListingsItemBatches = string[] | null;

export type GetUsersWalletOrHandle200ListingsItemDeleted = boolean | null;

export type GetUsersWalletOrHandle200ListingsItemActive = boolean | null;

/**
 * Marketplace listing with per-tonne price and project info.
 */
export type GetUsersWalletOrHandle200ListingsItem = {
  /** Unique listing identifier */
  id: string;
  /** Remaining supply. Unformatted 18 decimal string */
  leftToSell: string;
  /** Address of the asset being sold */
  tokenAddress: string;
  /** USDC price per tonne. Unformatted 6 decimal string. e.g. 1000000 */
  singleUnitPrice: string;
  totalAmountToSell: string;
  active?: GetUsersWalletOrHandle200ListingsItemActive;
  deleted?: GetUsersWalletOrHandle200ListingsItemDeleted;
  batches?: GetUsersWalletOrHandle200ListingsItemBatches;
  batchPrices?: GetUsersWalletOrHandle200ListingsItemBatchPrices;
  createdAt?: GetUsersWalletOrHandle200ListingsItemCreatedAt;
  updatedAt?: GetUsersWalletOrHandle200ListingsItemUpdatedAt;
  seller: GetUsersWalletOrHandle200ListingsItemSeller;
  /** Unix Timestamp (seconds) when the listing expires. */
  expiration: string;
  /** Minimum quantity for purchase transaction to succeed. */
  minFillAmount: string;
  project: GetUsersWalletOrHandle200ListingsItemProject;
};

export type GetUsersWalletOrHandle200ProfileImgUrl = string | null;

export type GetUsersWalletOrHandle200Description = string | null;

export type GetUsersWalletOrHandle200Handle = string | null;
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUsersWalletOrHandleNetwork = {  polygon: 'polygon',
  mumbai: 'mumbai',
} as const;
export type GetUsersWalletOrHandleParams = {
/**
 * Optional. Desired blockchain network. Default is `polygon` (mainnet).
 */
network?: typeof GetUsersWalletOrHandleNetwork[keyof typeof GetUsersWalletOrHandleNetwork] ;


/**
 * Only return listings that expire after this timestamp (Unix seconds)
 */
expiresAfter?: string;
};

export type GetProjects200ItemImagesAnyOfItem = {
  url: string;
  caption: string;
};

export type GetProjects200ItemImages = GetProjects200ItemImagesAnyOfItem[] | null;

export type GetProjects200Item = {
  description?: GetProjects200ItemDescription;
  short_description?: GetProjects200ItemShortDescription;
  key: string;
  projectID: string;
  name: string;
  methodologies: GetProjects200ItemMethodologiesItem[];
  /** A GeoJSON Point feature. */
  location?: GetProjects200ItemLocation;
  vintage: string;
  projectAddress: string;
  registry: string;
  updatedAt: string;
  country: GetProjects200ItemCountry;
  region: string;
  price: string;
  listings?: GetProjects200ItemListings;
  images?: GetProjects200ItemImages;
};

export type GetProjects200ItemListingsAnyOfItemProject = {
  id: string;
  key: string;
  vintage: string;
  name: string;
  category: string;
  country: string;
  methodology: string;
};

/**
 * Marketplace listing with per-tonne price and project info.
 */
export type GetProjects200ItemListingsAnyOfItem = {
  /** Unique listing identifier */
  id: string;
  /** Remaining supply. Unformatted 18 decimal string */
  leftToSell: string;
  /** Address of the asset being sold */
  tokenAddress: string;
  /** USDC price per tonne. Unformatted 6 decimal string. e.g. 1000000 */
  singleUnitPrice: string;
  totalAmountToSell: string;
  active?: GetProjects200ItemListingsAnyOfItemActive;
  deleted?: GetProjects200ItemListingsAnyOfItemDeleted;
  batches?: GetProjects200ItemListingsAnyOfItemBatches;
  batchPrices?: GetProjects200ItemListingsAnyOfItemBatchPrices;
  createdAt?: GetProjects200ItemListingsAnyOfItemCreatedAt;
  updatedAt?: GetProjects200ItemListingsAnyOfItemUpdatedAt;
  seller: GetProjects200ItemListingsAnyOfItemSeller;
  /** Unix Timestamp (seconds) when the listing expires. */
  expiration: string;
  /** Minimum quantity for purchase transaction to succeed. */
  minFillAmount: string;
  project: GetProjects200ItemListingsAnyOfItemProject;
};

export type GetProjects200ItemListings = GetProjects200ItemListingsAnyOfItem[] | null;

export type GetProjects200ItemListingsAnyOfItemSellerProfileImgUrl = string | null;

export type GetProjects200ItemListingsAnyOfItemSellerDescription = string | null;

export type GetProjects200ItemListingsAnyOfItemSellerUsername = string | null;

export type GetProjects200ItemListingsAnyOfItemSellerHandle = string | null;

export type GetProjects200ItemListingsAnyOfItemSeller = {
  handle?: GetProjects200ItemListingsAnyOfItemSellerHandle;
  username?: GetProjects200ItemListingsAnyOfItemSellerUsername;
  description?: GetProjects200ItemListingsAnyOfItemSellerDescription;
  profileImgUrl?: GetProjects200ItemListingsAnyOfItemSellerProfileImgUrl;
  id: string;
};

export type GetProjects200ItemListingsAnyOfItemUpdatedAt = string | null;

export type GetProjects200ItemListingsAnyOfItemCreatedAt = string | null;

export type GetProjects200ItemListingsAnyOfItemBatchPrices = string[] | null;

export type GetProjects200ItemListingsAnyOfItemBatches = string[] | null;

export type GetProjects200ItemListingsAnyOfItemDeleted = boolean | null;

export type GetProjects200ItemListingsAnyOfItemActive = boolean | null;

export type GetProjects200ItemCountry = {
  id: string;
};

export type GetProjects200ItemLocationAnyOfGeometryType = typeof GetProjects200ItemLocationAnyOfGeometryType[keyof typeof GetProjects200ItemLocationAnyOfGeometryType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProjects200ItemLocationAnyOfGeometryType = {
  Point: 'Point',
} as const;

export type GetProjects200ItemLocationAnyOfGeometry = {
  type: GetProjects200ItemLocationAnyOfGeometryType;
  coordinates: number[];
};

export type GetProjects200ItemLocationAnyOfType = typeof GetProjects200ItemLocationAnyOfType[keyof typeof GetProjects200ItemLocationAnyOfType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProjects200ItemLocationAnyOfType = {
  Feature: 'Feature',
} as const;

export type GetProjects200ItemLocationAnyOf = {
  type: GetProjects200ItemLocationAnyOfType;
  geometry: GetProjects200ItemLocationAnyOfGeometry;
};

/**
 * A GeoJSON Point feature.
 */
export type GetProjects200ItemLocation = GetProjects200ItemLocationAnyOf | null;

export type GetProjects200ItemMethodologiesItem = GetProjects200ItemMethodologiesItemAnyOf | null;

export type GetProjects200ItemMethodologiesItemAnyOfName = string | null;

export type GetProjects200ItemMethodologiesItemAnyOfCategory = string | null;

export type GetProjects200ItemMethodologiesItemAnyOfId = string | null;

export type GetProjects200ItemMethodologiesItemAnyOf = {
  id?: GetProjects200ItemMethodologiesItemAnyOfId;
  category?: GetProjects200ItemMethodologiesItemAnyOfCategory;
  name?: GetProjects200ItemMethodologiesItemAnyOfName;
};

export type GetProjects200ItemShortDescription = string | null;

export type GetProjects200ItemDescription = string | null;
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProjectsNetwork = {  polygon: 'polygon',
  mumbai: 'mumbai',
} as const;
export type GetProjectsParams = {
/**
 * Optional. Desired blockchain network. Default is `polygon` (mainnet).
 */
network?: typeof GetProjectsNetwork[keyof typeof GetProjectsNetwork] ;


/**
 * Desired country of origin for carbon projects
 */
country?: string;
/**
 * Desired category of carbon projects
 */
category?: string;
/**
 * Search carbon project names and descriptions for a string of text
 */
search?: string;
/**
 * Desired vintage of carbon projects
 */
vintage?: string;
/**
 * Only return projects listings that expire after this timestamp (Unix seconds)
 */
expiresAfter?: string;
};

export type GetCountries200Item = {
  id: string;
};

export type GetCategories200Item = {
  id: string;
};

/**
 * Optional. Desired blockchain network. Default is `polygon` (mainnet).
 */
export type Def1 = typeof Def1[keyof typeof Def1] ;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Def1 = {  polygon: 'polygon',
  mumbai: 'mumbai',
} as const;

/**
 * Optional. Desired blockchain network. Default is `polygon` (mainnet).
 */
export type Def0Network = typeof Def0Network[keyof typeof Def0Network] ;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Def0Network = {  polygon: 'polygon',
  mumbai: 'mumbai',
} as const;

export interface Def0 {
  /** Optional. Desired blockchain network. Default is `polygon` (mainnet). */
  network: Def0Network;
}

export type ImageUrl = string | null;

export type ImageCaption = string | null;

export interface Image {
  caption?: ImageCaption;
  url?: ImageUrl;
}

/**
 * Lowercase name of pool / pool token e.g. 'bct'
 */
export type TokenPricePoolName = typeof TokenPricePoolName[keyof typeof TokenPricePoolName] ;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TokenPricePoolName = {  ubo: 'ubo',
  nbo: 'nbo',
  bct: 'bct',
  nct: 'nct',
} as const;

export interface TokenPrice {
  /** Lowercase name of pool / pool token e.g. 'bct' */
  poolName: TokenPricePoolName;
  /** Remaining supply in pool */
  supply: string;
  /** Address of the pool itself, e.g. bct token address */
  poolAddress: boolean;
  /** Address of the project token in this pool */
  projectTokenAddress: string;
  /** True if default project for pool and no selective redemption fee applies */
  isPoolDefault: boolean;
  /** formatted USDC price for 1 tonne e.g. '0.123456' */
  singleUnitPrice: string;
}

export type AssetToken = {
  id: string;
  name: string;
  symbol: string;
  decimals: number;
};

export interface Asset {
  id: string;
  token: AssetToken;
  amount: string;
}

export type UserAssetsItem = {
  id: string;
  token: UserAssetsItemToken;
  amount: string;
};

export interface User {
  handle?: UserHandle;
  username: string;
  description?: UserDescription;
  profileImgUrl?: UserProfileImgUrl;
  updatedAt: number;
  createdAt: number;
  wallet: string;
  listings: UserListingsItem[];
  activities: UserActivitiesItem[];
  assets: UserAssetsItem[];
}

export type UserAssetsItemToken = {
  id: string;
  name: string;
  symbol: string;
  decimals: number;
};

export type UserActivitiesItemBuyerAnyOfHandle = string | null;

export type UserActivitiesItemBuyerAnyOf = {
  id: string;
  handle?: UserActivitiesItemBuyerAnyOfHandle;
};

export type UserActivitiesItemBuyer = UserActivitiesItemBuyerAnyOf | null;

export type UserActivitiesItemSellerAnyOfHandle = string | null;

export type UserActivitiesItemSellerAnyOf = {
  id: string;
  handle?: UserActivitiesItemSellerAnyOfHandle;
};

export type UserActivitiesItemSeller = UserActivitiesItemSellerAnyOf | null;

export type UserActivitiesItemActivityType = string | null;

export type UserActivitiesItemTimeStamp = string | null;

export type UserActivitiesItemPreviousPrice = string | null;

export type UserActivitiesItemPrice = string | null;

export type UserActivitiesItemPreviousAmount = string | null;

export type UserActivitiesItemAmount = string | null;

export type UserActivitiesItem = {
  id: string;
  amount?: UserActivitiesItemAmount;
  previousAmount?: UserActivitiesItemPreviousAmount;
  price?: UserActivitiesItemPrice;
  previousPrice?: UserActivitiesItemPreviousPrice;
  timeStamp?: UserActivitiesItemTimeStamp;
  activityType?: UserActivitiesItemActivityType;
  seller?: UserActivitiesItemSeller;
  buyer?: UserActivitiesItemBuyer;
};

export type UserListingsItemProject = {
  id: string;
  key: string;
  vintage: string;
  name: string;
  category: string;
  country: string;
  methodology: string;
};

export type UserListingsItemSellerProfileImgUrl = string | null;

export type UserListingsItemSellerDescription = string | null;

export type UserListingsItemSellerUsername = string | null;

export type UserListingsItemSellerHandle = string | null;

export type UserListingsItemSeller = {
  handle?: UserListingsItemSellerHandle;
  username?: UserListingsItemSellerUsername;
  description?: UserListingsItemSellerDescription;
  profileImgUrl?: UserListingsItemSellerProfileImgUrl;
  id: string;
};

export type UserListingsItemUpdatedAt = string | null;

export type UserListingsItemCreatedAt = string | null;

export type UserListingsItemBatchPrices = string[] | null;

export type UserListingsItemBatches = string[] | null;

export type UserListingsItemDeleted = boolean | null;

export type UserListingsItemActive = boolean | null;

/**
 * Marketplace listing with per-tonne price and project info.
 */
export type UserListingsItem = {
  /** Unique listing identifier */
  id: string;
  /** Remaining supply. Unformatted 18 decimal string */
  leftToSell: string;
  /** Address of the asset being sold */
  tokenAddress: string;
  /** USDC price per tonne. Unformatted 6 decimal string. e.g. 1000000 */
  singleUnitPrice: string;
  totalAmountToSell: string;
  active?: UserListingsItemActive;
  deleted?: UserListingsItemDeleted;
  batches?: UserListingsItemBatches;
  batchPrices?: UserListingsItemBatchPrices;
  createdAt?: UserListingsItemCreatedAt;
  updatedAt?: UserListingsItemUpdatedAt;
  seller: UserListingsItemSeller;
  /** Unix Timestamp (seconds) when the listing expires. */
  expiration: string;
  /** Minimum quantity for purchase transaction to succeed. */
  minFillAmount: string;
  project: UserListingsItemProject;
};

export type UserProfileImgUrl = string | null;

export type UserDescription = string | null;

export type UserHandle = string | null;

export type PurchaseListingProject = {
  country: string;
  key: string;
  methodology: string;
  name: string;
  projectID: string;
  vintage: string;
};

export type PurchaseListing = {
  /** ID of the listing that was purchased */
  id: string;
  project: PurchaseListingProject;
};

export interface Purchase {
  /** ID (transaction hash) of the purchase */
  id: string;
  /** Quantity of credits purchased */
  amount: string;
  listing: PurchaseListing;
  /** Total purchase price (USDC) */
  price: string;
}

/**
 * Optional. Desired blockchain network. Default is `polygon` (mainnet).
 */
export type NetworkParam = typeof NetworkParam[keyof typeof NetworkParam] ;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NetworkParam = {  polygon: 'polygon',
  mumbai: 'mumbai',
} as const;

export type MethodologyName = string | null;

export type MethodologyCategory = string | null;

export type MethodologyId = string | null;

export interface Methodology {
  id?: MethodologyId;
  category?: MethodologyCategory;
  name?: MethodologyName;
}

export type ListingProject = {
  id: string;
  key: string;
  vintage: string;
  name: string;
  category: string;
  country: string;
  methodology: string;
};

export type ListingSellerProfileImgUrl = string | null;

export type ListingSellerDescription = string | null;

export type ListingSellerUsername = string | null;

export type ListingSellerHandle = string | null;

export type ListingSeller = {
  handle?: ListingSellerHandle;
  username?: ListingSellerUsername;
  description?: ListingSellerDescription;
  profileImgUrl?: ListingSellerProfileImgUrl;
  id: string;
};

export type ListingUpdatedAt = string | null;

export type ListingCreatedAt = string | null;

export type ListingBatchPrices = string[] | null;

export type ListingBatches = string[] | null;

export type ListingDeleted = boolean | null;

export type ListingActive = boolean | null;

/**
 * Marketplace listing with per-tonne price and project info.
 */
export interface Listing {
  /** Unique listing identifier */
  id: string;
  /** Remaining supply. Unformatted 18 decimal string */
  leftToSell: string;
  /** Address of the asset being sold */
  tokenAddress: string;
  /** USDC price per tonne. Unformatted 6 decimal string. e.g. 1000000 */
  singleUnitPrice: string;
  totalAmountToSell: string;
  active?: ListingActive;
  deleted?: ListingDeleted;
  batches?: ListingBatches;
  batchPrices?: ListingBatchPrices;
  createdAt?: ListingCreatedAt;
  updatedAt?: ListingUpdatedAt;
  seller: ListingSeller;
  /** Unix Timestamp (seconds) when the listing expires. */
  expiration: string;
  /** Minimum quantity for purchase transaction to succeed. */
  minFillAmount: string;
  project: ListingProject;
}

export interface Country {
  id: string;
}

export interface Category {
  id: string;
}

export type ActivityBuyerAnyOfHandle = string | null;

export type ActivityBuyerAnyOf = {
  id: string;
  handle?: ActivityBuyerAnyOfHandle;
};

export type ActivityBuyer = ActivityBuyerAnyOf | null;

export type ActivitySellerAnyOfHandle = string | null;

export type ActivitySellerAnyOf = {
  id: string;
  handle?: ActivitySellerAnyOfHandle;
};

export type ActivitySeller = ActivitySellerAnyOf | null;

export type ActivityActivityType = string | null;

export type ActivityTimeStamp = string | null;

export type ActivityPreviousPrice = string | null;

export type ActivityPrice = string | null;

export type ActivityPreviousAmount = string | null;

export type ActivityAmount = string | null;

export interface Activity {
  id: string;
  amount?: ActivityAmount;
  previousAmount?: ActivityPreviousAmount;
  price?: ActivityPrice;
  previousPrice?: ActivityPreviousPrice;
  timeStamp?: ActivityTimeStamp;
  activityType?: ActivityActivityType;
  seller?: ActivitySeller;
  buyer?: ActivityBuyer;
}

export type DetailedProjectActivitiesItem = {
  id: string;
  amount?: DetailedProjectActivitiesItemAmount;
  previousAmount?: DetailedProjectActivitiesItemPreviousAmount;
  price?: DetailedProjectActivitiesItemPrice;
  previousPrice?: DetailedProjectActivitiesItemPreviousPrice;
  timeStamp?: DetailedProjectActivitiesItemTimeStamp;
  activityType?: DetailedProjectActivitiesItemActivityType;
  seller?: DetailedProjectActivitiesItemSeller;
  buyer?: DetailedProjectActivitiesItemBuyer;
};

export interface DetailedProject {
  key: string;
  projectID?: DetailedProjectProjectID;
  name?: DetailedProjectName;
  registry?: DetailedProjectRegistry;
  country?: DetailedProjectCountry;
  description?: DetailedProjectDescription;
  location?: DetailedProjectLocation;
  methodologies?: DetailedProjectMethodologies;
  images: DetailedProjectImagesItem[];
  long_description?: DetailedProjectLongDescription;
  short_description?: DetailedProjectShortDescription;
  url?: DetailedProjectUrl;
  stats: DetailedProjectStats;
  prices: DetailedProjectPricesItem[];
  listings: DetailedProjectListingsItem[];
  activities: DetailedProjectActivitiesItem[];
  price: string;
  vintage: string;
}

export type DetailedProjectActivitiesItemBuyerAnyOfHandle = string | null;

export type DetailedProjectActivitiesItemBuyerAnyOf = {
  id: string;
  handle?: DetailedProjectActivitiesItemBuyerAnyOfHandle;
};

export type DetailedProjectActivitiesItemBuyer = DetailedProjectActivitiesItemBuyerAnyOf | null;

export type DetailedProjectActivitiesItemSellerAnyOfHandle = string | null;

export type DetailedProjectActivitiesItemSellerAnyOf = {
  id: string;
  handle?: DetailedProjectActivitiesItemSellerAnyOfHandle;
};

export type DetailedProjectActivitiesItemSeller = DetailedProjectActivitiesItemSellerAnyOf | null;

export type DetailedProjectActivitiesItemActivityType = string | null;

export type DetailedProjectActivitiesItemTimeStamp = string | null;

export type DetailedProjectActivitiesItemPreviousPrice = string | null;

export type DetailedProjectActivitiesItemPrice = string | null;

export type DetailedProjectActivitiesItemPreviousAmount = string | null;

export type DetailedProjectActivitiesItemAmount = string | null;

export type DetailedProjectListingsItemProject = {
  id: string;
  key: string;
  vintage: string;
  name: string;
  category: string;
  country: string;
  methodology: string;
};

export type DetailedProjectListingsItemSellerProfileImgUrl = string | null;

export type DetailedProjectListingsItemSellerDescription = string | null;

export type DetailedProjectListingsItemSellerUsername = string | null;

export type DetailedProjectListingsItemSellerHandle = string | null;

export type DetailedProjectListingsItemSeller = {
  handle?: DetailedProjectListingsItemSellerHandle;
  username?: DetailedProjectListingsItemSellerUsername;
  description?: DetailedProjectListingsItemSellerDescription;
  profileImgUrl?: DetailedProjectListingsItemSellerProfileImgUrl;
  id: string;
};

export type DetailedProjectListingsItemUpdatedAt = string | null;

export type DetailedProjectListingsItemCreatedAt = string | null;

export type DetailedProjectListingsItemBatchPrices = string[] | null;

export type DetailedProjectListingsItemBatches = string[] | null;

export type DetailedProjectListingsItemDeleted = boolean | null;

export type DetailedProjectListingsItemActive = boolean | null;

/**
 * Marketplace listing with per-tonne price and project info.
 */
export type DetailedProjectListingsItem = {
  /** Unique listing identifier */
  id: string;
  /** Remaining supply. Unformatted 18 decimal string */
  leftToSell: string;
  /** Address of the asset being sold */
  tokenAddress: string;
  /** USDC price per tonne. Unformatted 6 decimal string. e.g. 1000000 */
  singleUnitPrice: string;
  totalAmountToSell: string;
  active?: DetailedProjectListingsItemActive;
  deleted?: DetailedProjectListingsItemDeleted;
  batches?: DetailedProjectListingsItemBatches;
  batchPrices?: DetailedProjectListingsItemBatchPrices;
  createdAt?: DetailedProjectListingsItemCreatedAt;
  updatedAt?: DetailedProjectListingsItemUpdatedAt;
  seller: DetailedProjectListingsItemSeller;
  /** Unix Timestamp (seconds) when the listing expires. */
  expiration: string;
  /** Minimum quantity for purchase transaction to succeed. */
  minFillAmount: string;
  project: DetailedProjectListingsItemProject;
};

/**
 * Lowercase name of pool / pool token e.g. 'bct'
 */
export type DetailedProjectPricesItemPoolName = typeof DetailedProjectPricesItemPoolName[keyof typeof DetailedProjectPricesItemPoolName] ;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DetailedProjectPricesItemPoolName = {  ubo: 'ubo',
  nbo: 'nbo',
  bct: 'bct',
  nct: 'nct',
} as const;

export type DetailedProjectPricesItem = {
  /** Lowercase name of pool / pool token e.g. 'bct' */
  poolName: DetailedProjectPricesItemPoolName;
  /** Remaining supply in pool */
  supply: string;
  /** Address of the pool itself, e.g. bct token address */
  poolAddress: boolean;
  /** Address of the project token in this pool */
  projectTokenAddress: string;
  /** True if default project for pool and no selective redemption fee applies */
  isPoolDefault: boolean;
  /** formatted USDC price for 1 tonne e.g. '0.123456' */
  singleUnitPrice: string;
};

export type DetailedProjectStats = {
  totalBridged: number;
  totalRetired: number;
  totalSupply: number;
};

export type DetailedProjectUrl = string | null;

export type DetailedProjectShortDescription = string | null;

export type DetailedProjectLongDescription = string | null;

export type DetailedProjectImagesItemUrl = string | null;

export type DetailedProjectImagesItemCaption = string | null;

export type DetailedProjectImagesItem = {
  caption?: DetailedProjectImagesItemCaption;
  url?: DetailedProjectImagesItemUrl;
};

export type DetailedProjectMethodologiesAnyOfItemAnyOfName = string | null;

export type DetailedProjectMethodologiesAnyOfItemAnyOfCategory = string | null;

export type DetailedProjectMethodologiesAnyOfItemAnyOfId = string | null;

export type DetailedProjectMethodologiesAnyOfItemAnyOf = {
  id?: DetailedProjectMethodologiesAnyOfItemAnyOfId;
  category?: DetailedProjectMethodologiesAnyOfItemAnyOfCategory;
  name?: DetailedProjectMethodologiesAnyOfItemAnyOfName;
};

export type DetailedProjectMethodologiesAnyOfItem = DetailedProjectMethodologiesAnyOfItemAnyOf | null;

export type DetailedProjectMethodologies = DetailedProjectMethodologiesAnyOfItem[] | null;

export type DetailedProjectLocationAnyOfGeometryType = typeof DetailedProjectLocationAnyOfGeometryType[keyof typeof DetailedProjectLocationAnyOfGeometryType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DetailedProjectLocationAnyOfGeometryType = {
  Point: 'Point',
} as const;

export type DetailedProjectLocationAnyOfGeometry = {
  type: DetailedProjectLocationAnyOfGeometryType;
  coordinates: number[];
};

export type DetailedProjectLocationAnyOfType = typeof DetailedProjectLocationAnyOfType[keyof typeof DetailedProjectLocationAnyOfType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DetailedProjectLocationAnyOfType = {
  Feature: 'Feature',
} as const;

export type DetailedProjectLocationAnyOf = {
  type: DetailedProjectLocationAnyOfType;
  geometry: DetailedProjectLocationAnyOfGeometry;
};

export type DetailedProjectLocation = DetailedProjectLocationAnyOf | null;

export type DetailedProjectDescription = string | null;

export type DetailedProjectCountry = string | null;

export type DetailedProjectRegistry = string | null;

export type DetailedProjectName = string | null;

export type DetailedProjectProjectID = string | null;

export type ProjectImagesAnyOfItem = {
  url: string;
  caption: string;
};

export type ProjectImages = ProjectImagesAnyOfItem[] | null;

export type ProjectListings = ProjectListingsAnyOfItem[] | null;

export interface Project {
  description?: ProjectDescription;
  short_description?: ProjectShortDescription;
  key: string;
  projectID: string;
  name: string;
  methodologies: ProjectMethodologiesItem[];
  /** A GeoJSON Point feature. */
  location?: ProjectLocation;
  vintage: string;
  projectAddress: string;
  registry: string;
  updatedAt: string;
  country: ProjectCountry;
  region: string;
  price: string;
  listings?: ProjectListings;
  images?: ProjectImages;
}

export type ProjectListingsAnyOfItemProject = {
  id: string;
  key: string;
  vintage: string;
  name: string;
  category: string;
  country: string;
  methodology: string;
};

export type ProjectListingsAnyOfItemSellerProfileImgUrl = string | null;

export type ProjectListingsAnyOfItemSellerDescription = string | null;

export type ProjectListingsAnyOfItemSellerUsername = string | null;

export type ProjectListingsAnyOfItemSellerHandle = string | null;

export type ProjectListingsAnyOfItemSeller = {
  handle?: ProjectListingsAnyOfItemSellerHandle;
  username?: ProjectListingsAnyOfItemSellerUsername;
  description?: ProjectListingsAnyOfItemSellerDescription;
  profileImgUrl?: ProjectListingsAnyOfItemSellerProfileImgUrl;
  id: string;
};

export type ProjectListingsAnyOfItemUpdatedAt = string | null;

export type ProjectListingsAnyOfItemCreatedAt = string | null;

export type ProjectListingsAnyOfItemBatchPrices = string[] | null;

export type ProjectListingsAnyOfItemBatches = string[] | null;

export type ProjectListingsAnyOfItemDeleted = boolean | null;

export type ProjectListingsAnyOfItemActive = boolean | null;

/**
 * Marketplace listing with per-tonne price and project info.
 */
export type ProjectListingsAnyOfItem = {
  /** Unique listing identifier */
  id: string;
  /** Remaining supply. Unformatted 18 decimal string */
  leftToSell: string;
  /** Address of the asset being sold */
  tokenAddress: string;
  /** USDC price per tonne. Unformatted 6 decimal string. e.g. 1000000 */
  singleUnitPrice: string;
  totalAmountToSell: string;
  active?: ProjectListingsAnyOfItemActive;
  deleted?: ProjectListingsAnyOfItemDeleted;
  batches?: ProjectListingsAnyOfItemBatches;
  batchPrices?: ProjectListingsAnyOfItemBatchPrices;
  createdAt?: ProjectListingsAnyOfItemCreatedAt;
  updatedAt?: ProjectListingsAnyOfItemUpdatedAt;
  seller: ProjectListingsAnyOfItemSeller;
  /** Unix Timestamp (seconds) when the listing expires. */
  expiration: string;
  /** Minimum quantity for purchase transaction to succeed. */
  minFillAmount: string;
  project: ProjectListingsAnyOfItemProject;
};

export type ProjectCountry = {
  id: string;
};

/**
 * A GeoJSON Point feature.
 */
export type ProjectLocation = ProjectLocationAnyOf | null;

export type ProjectLocationAnyOfGeometryType = typeof ProjectLocationAnyOfGeometryType[keyof typeof ProjectLocationAnyOfGeometryType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProjectLocationAnyOfGeometryType = {
  Point: 'Point',
} as const;

export type ProjectLocationAnyOfGeometry = {
  type: ProjectLocationAnyOfGeometryType;
  coordinates: number[];
};

export type ProjectLocationAnyOfType = typeof ProjectLocationAnyOfType[keyof typeof ProjectLocationAnyOfType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProjectLocationAnyOfType = {
  Feature: 'Feature',
} as const;

export type ProjectLocationAnyOf = {
  type: ProjectLocationAnyOfType;
  geometry: ProjectLocationAnyOfGeometry;
};

export type ProjectMethodologiesItemAnyOfName = string | null;

export type ProjectMethodologiesItemAnyOfCategory = string | null;

export type ProjectMethodologiesItemAnyOfId = string | null;

export type ProjectMethodologiesItemAnyOf = {
  id?: ProjectMethodologiesItemAnyOfId;
  category?: ProjectMethodologiesItemAnyOfCategory;
  name?: ProjectMethodologiesItemAnyOfName;
};

export type ProjectMethodologiesItem = ProjectMethodologiesItemAnyOf | null;

export type ProjectShortDescription = string | null;

export type ProjectDescription = string | null;


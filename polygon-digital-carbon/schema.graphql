##### Base level registry and bridging data #####

enum Registry {
  VERRA
  GOLD_STANDARD
  PURO_EARTH
  ICR
  J_CREDIT
  ECO_REGISTRY
  CCS
}

enum RetireSource {
  KLIMA
  OTHER
}

enum BridgeProtocol {
  TOUCAN
  C3
  MOSS
  ICR
  COOREST
}

enum CrossChainBridgeDirection {
  SENT
  RECEIVED
}

enum ProvenanceType {
  ORIGINATION
  TRANSFER
  RETIREMENT
  DETOKENIZED
}

enum AsyncRetireStatus {
  FINALIZED
  REQUESTED
  REVERTED
  AWAITING
}

type ProvenanceRecord @entity {
  "Token address - Holding address - increment"
  id: Bytes!

  "Credit token address"
  token: Bytes!

  "Credit token ID"
  tokenId: BigInt

  "Transaction hash creating this record"
  transactionHash: Bytes!

  "Action being made with the credit"
  transactionType: ProvenanceType!

  "Any applicable registry serial numbers for origination"
  registrySerialNumbers: [String!]!

  "Prior records associated with this transaction"
  priorRecords: [ProvenanceRecord!]!

  "Sender of the credit"
  sender: Bytes!

  "Receiver of the credit"
  receiver: Bytes!

  "Original amount received"
  originalAmount: BigInt!

  "Original amount received in tonnes"
  originalAmountTonnes: BigDecimal!

  "Remaining amount held"
  remainingAmount: BigInt!

  "Remaining amount held in tonnes"
  remainingAmountTonnes: BigDecimal!

  "Unix timestamp created"
  createdAt: BigInt!

  "Unix timestamp updated"
  updatedAt: BigInt!
}

type Token @entity {
  "Ethereum contract address. for ERC1155s id address.concat(tokenId)"
  id: Bytes!

  tokenAddress: Bytes!

  "Name of the token"
  name: String!

  "Symbol of the token"
  symbol: String!

  "Decimals of the token"
  decimals: Int!

  "Token Id"
  tokenId: BigInt

  "isExAnte Identifier"
  isExAnte: Boolean!

  "Latest price in USD"
  latestPriceUSD: BigDecimal

  "Latest price update timestamp"
  latestPriceUSDUpdated: BigInt

  "Latest price in KLIMA"
  latestPricePerKLIMA: BigDecimal

  "Latest price in KLIMAupdate timestamp"
  latestPricePerKLIMAUpdated: BigInt
}

##############################
#### Carbon Specific Data ####
##############################

type Ecosystem @entity {
  id: ID!

  "Active credits with supply > 0"
  activeCredits: [Bytes!]!
}

type Epoch @entity {
  "sKLIMA epoch number"
  id: ID!

  "Numeric field for sorting"
  epoch: BigInt!

  "Total active carbon credit supply"
  creditSupply: BigInt!

  "Change in active supply since last epoch"
  deltaCreditSupply: BigInt!

  "600 epoch credit supply SMA"
  creditSMA: BigInt!
}

type Methodology @entity {
  id: ID!

  scope: String

  approvalDate: String!

  currentVersion: String!
}

type CarbonProject @entity {
  "{Registry Enum String}-{Registry Project ID}"
  id: ID!

  "Issuing registry"
  registry: Registry!

  "Registry Project ID"
  projectID: String!

  "Name of the project"
  name: String!

  "Methodologies associated with this project. For projects having more than one, the first one is the primary methodology."
  methodologies: String!

  "Category associated with this project"
  category: String!

  "Country where the project takes place"
  country: String!

  "Region within the country where the project takes place"
  region: String!

  "Carbon credit tokens related to this project"
  carbonCredits: [CarbonCredit!]! @derivedFrom(field: "project")
}

type CarbonCredit @entity {
  "{tokenAddress}-{tokenId} concatenated. If no tokenId, then just the tokenAddress."
  id: Bytes!

  "Ethereum address where the token is deployed"
  tokenAddress: Bytes!

  "Token ID for the credit vintage (if applicable)"
  tokenId: BigInt

  "Flag for if this credit is exAnte"
  isExAnte: Boolean

  "ExPost Token ID for the credit vintage (if applicable)"
  exPostTokenId: BigInt

  "Protocol used to bridge the tons"
  bridgeProtocol: BridgeProtocol!

  "Carbon Project this token belongs to"
  project: CarbonProject!

  "Vintage of issuance"
  vintage: Int!

  "Current token supply"
  currentSupply: BigInt!

  "Total tokens issued via bridging"
  bridged: BigInt!

  "Total tokens retired"
  retired: BigInt!

  "Total tokens bridged to other chains"
  crossChainSupply: BigInt!

  "All bridge events for this credit"
  bridges: [Bridge!]! @derivedFrom(field: "credit")

  "All retirement events for this credit"
  retires: [Retire!]! @derivedFrom(field: "credit")

  "Current pool balances for this credit"
  poolBalances: [CarbonPoolCreditBalance!]! @derivedFrom(field: "credit")

  "Total provenance records for this credit"
  provenanceCount: Int!

  "Last batch ID that was fractionalized if applicable"
  lastBatchId: BigInt!

  "Two digit credit identifier for J-credits"
  batchSuffix: String

  # Puro specific fields
  "Puro NFT token ID linked to Puro batch"
  puroBatchTokenId: BigInt
}

type CarbonCreditSnapshot @entity {
  # These are tracked by Klima rebase epochs. Currently set to be at least 11520 blocks apart.

  "{Token Address}-{Epoch ID}"
  id: Bytes!

  "Credit for this snapshot"
  credit: CarbonCredit!

  "Klima rebase epoch"
  epoch: BigInt!

  "Current token supply"
  currentSupply: BigInt!

  "Total tokens issued via bridging"
  bridged: BigInt!

  "Total tokens retired"
  retired: BigInt!

  "Total tokens bridged to other chains"
  crossChainSupply: BigInt!

  "Timestamp created"
  createdAt: BigInt!
}

type Bridge @entity(immutable: true) {
  "{Transaction hash}-{Log Index}"
  id: Bytes!

  "Credit bridged"
  credit: CarbonCredit!

  "Account receiving the bridged carbon"
  account: Account!

  "Amount of tokens bridged in native units"
  amount: BigInt!

  "Block timestamp of the bridge"
  timestamp: BigInt!
}

type CrossChainBridge @entity(immutable: true) {
  "{Transaction hash}-{Log Index}"
  id: Bytes!

  "Transaction hash of the event"
  hash: Bytes!

  "ID of the pool being bridged, if any"
  pool: CarbonPool

  "ID of the credit being bridged, if any"
  credit: CarbonCredit

  "Amount of tokens bridged"
  amount: BigInt!

  "Bridging address"
  bridger: Bytes!

  "Bridge direction"
  direction: CrossChainBridgeDirection!

  "Block timestamp of the bridge"
  timestamp: BigInt!
}

type Retire @entity {
  "{Account}-{Total Retirement Counter}"
  id: Bytes!

  "Protocol specific ID"
  bridgeID: String

  "Carbon credit being retired"
  credit: CarbonCredit!

  "Pool credit was sourced from, if any"
  pool: CarbonPool

  "Source of the retirement"
  source: RetireSource!

  "Amount of carbon retired"
  amount: BigInt!

  "Amount of carbon Retired in Tonnes"
  amountTonnes: BigDecimal!

  "Beneficiary address"
  beneficiaryAddress: Account!

  "Beneficiary description"
  beneficiaryName: String!

  "Beneficiary location"
  beneficiaryLocation: String!

  "Country code where consumed"
  consumptionCountryCode: String!

  "Consumption starting timestamp"
  consumptionPeriodStart: BigInt!

  "Consumption ending timestamp"
  consumptionPeriodEnd: BigInt!

  "Specific retirement message"
  retirementMessage: String!

  "Retiree address"
  retiringAddress: Account!

  "Retiree description"
  retiringName: String!

  "Transaction hash of the retirement"
  hash: Bytes!

  "Block timestamp of retirement"
  timestamp: BigInt!

  "Final provenance record created by this retirement"
  provenance: ProvenanceRecord

  ### Additional attributes if applicable ###

  "Many registries assign a unique retirement token id, most often 721s"
  retirementTokenId: BigInt

  klimaRetire: KlimaRetire @derivedFrom(field: "retire")

  "Async retire status for retirement if applicable"
  asyncRetireStatus: AsyncRetireStatus

  "Additional data for async retirements. Currently C3 retires, ECO & J-Credit, and puro.earth"
  asyncRetireRequest: AsyncRetireRequest
}

type KlimaRetire @entity {
  "{Account}-{Klima Retirement Index}"
  id: Bytes!

  "Retirement made by the aggregator"
  retire: Retire!

  "Klima retirement index"
  index: BigInt!

  "Fee charged for retirement in native units"
  feeAmount: BigInt!

  "Selective retirement"
  specific: Boolean!
}

type DailyKlimaRetireSnapshot @entity {
  id: ID!
  timestamp: BigInt!
  pool: Bytes!
  credit: CarbonCredit!
  amount: BigInt!
  feeAmount: BigInt!
}

type CarbonMetric @entity {
  id: ID!
  timestamp: BigInt!
  bctSupply: BigDecimal!
  nctSupply: BigDecimal!
  mco2Supply: BigDecimal!
  cco2Supply: BigDecimal!
  uboSupply: BigDecimal!
  nboSupply: BigDecimal!
  bctRedeemed: BigDecimal!
  nctRedeemed: BigDecimal!
  uboRedeemed: BigDecimal!
  nboRedeemed: BigDecimal!
  totalCarbonSupply: BigDecimal!
  bctCrosschainSupply: BigDecimal!
  nctCrosschainSupply: BigDecimal!
  totalCrosschainSupply: BigDecimal!
  tco2Retired: BigDecimal!
  mco2Retired: BigDecimal!
  cco2Retired: BigDecimal!
  c3tRetired: BigDecimal!
  icrRetired: BigDecimal!
  totalRetirements: BigDecimal!
  bctKlimaRetired: BigDecimal!
  nctKlimaRetired: BigDecimal!
  mco2KlimaRetired: BigDecimal!
  cco2KlimaRetired: BigDecimal!
  uboKlimaRetired: BigDecimal!
  nboKlimaRetired: BigDecimal!
  totalKlimaRetirements: BigDecimal!
}

##############################
#### Bridge Specific Data ####
##############################

type ToucanBatch @entity {
  "Token ID"
  id: ID!

  "Registry serial numbers associated with this batch"
  registrySerialNumbers: [String!]!

  "Creation Transaction hash"
  creationTransactionHash: Bytes!
}

# C3Project and C3RetirementMetadata are used for file datasources for C3 metadata
type C3MetadataProject @entity {
  id: ID!
  name: String
  project_id: String
  project_type: String
  registry: String
  region: String
  country: String
  methodology: String
  period_start: String
  period_end: String
  ac: Boolean
  uri: String
}

type C3RetirementMetadata @entity {
  id: ID!
  transferee: String
  reason: String
  projectId: String
  projectAddress: String
  amount: String
  vintage: String
  owner: String
  project: C3MetadataProject
  image: String
  pdf: String
  nftRegistry: String
}

# id is always and only safeguard
type TokenURISafeguard @entity {
  "Token URI"
  id: ID!
  requestsWithoutURI: [C3RetireRequestDetails!]!
}

type AsyncRetireRequest @entity {
  "Request ID"
  id: Bytes!
  status: AsyncRetireStatus!
  retire: Retire!
  provenance: ProvenanceRecord
  c3RetireRequestDetails: C3RetireRequestDetails
}

type C3RetireRequestDetails @entity {
  "Request ID"
  id: Bytes!
  index: BigInt!
  c3OffsetNftIndex: BigInt!
  tokenURI: String!
  retirementMetadata: C3RetirementMetadata
}

##############################
###### Carbon Pool Data ######
##############################

type CarbonPool @entity {
  "Ethereum address of the pool contract"
  id: Bytes!

  "Common name for the pool"
  name: String!

  "Decimals of the token"
  decimals: Int!

  "Current supply"
  supply: BigInt!

  "Current supply in Tonnes"
  supplyTonnes: BigDecimal!

  "Total tokens bridged to other chains"
  crossChainSupply: BigInt!

  "Current balances of underlying project tokens"
  creditBalances: [CarbonPoolCreditBalance!]! @derivedFrom(field: "pool")

  ### Snapshots ###

  dailySnapshots: [CarbonPoolDailySnapshot!]! @derivedFrom(field: "pool")

  lastSnapshotDayID: Int!

  nextSnapshotDayID: Int!

  ### Event level data ###

  deposits: [PoolDeposit!]! @derivedFrom(field: "pool")

  redeems: [PoolRedeem!]! @derivedFrom(field: "pool")
}

type CarbonPoolDailySnapshot @entity {
  "Ethereum address of the pool contract"
  id: Bytes!

  "Pool this snapshot belongs to"
  pool: CarbonPool!

  "Day ID of this snapshot"
  dayID: Int

  "Current supply"
  supply: BigInt!

  "Change in supply during this period"
  deltaSupply: BigInt!

  "Current balances of underlying project tokens"
  creditBalances: [CarbonPoolCreditBalanceDailySnapshot!]! @derivedFrom(field: "poolSnapshot")

  deposits: [PoolDeposit!]! @derivedFrom(field: "poolSnapshotID")

  redeems: [PoolRedeem!]! @derivedFrom(field: "poolSnapshotID")

  lastUpdateTimestamp: BigInt!

  lastUpdateBlockNumber: BigInt!
}

type CarbonPoolCreditBalance @entity {
  "{Pool Address}-{Credit Address}"
  id: Bytes!

  "Target carbon pool"
  pool: CarbonPool!

  "Credit being pooled"
  credit: CarbonCredit!

  "Current balance"
  balance: BigInt!

  "Current balance bridge to another chain"
  crossChainSupply: BigInt!

  "LTD deposited amount"
  deposited: BigInt!

  "LTD redeemed amount"
  redeemed: BigInt!

  ### Snapshots ###

  dailySnapshots: [CarbonPoolCreditBalanceDailySnapshot!]! @derivedFrom(field: "creditBalance")

  lastSnapshotDayID: Int!

  nextSnapshotDayID: Int!
}

type CarbonPoolCreditBalanceDailySnapshot @entity {
  "{Pool Address}-{Credit Address}-{Day ID}"
  id: Bytes!

  "Target carbon pool"
  pool: CarbonPool!

  "Credit being pooled"
  credit: CarbonCredit!

  "ID of the creditBalance entity"
  creditBalance: CarbonPoolCreditBalance!

  "Day ID of this snapshot"
  dayID: Int

  "The daily pool snapshot that this belongs to"
  poolSnapshot: CarbonPoolDailySnapshot!

  "Current balance"
  balance: BigInt!

  "Current balance bridge to another chain"
  crossChainSupply: BigInt!

  "Deposited amount"
  deposited: BigInt!

  "Redeemed amount"
  redeemed: BigInt!

  "Delta balance"
  deltaBalance: BigInt!

  "Delta balance bridge to another chain"
  deltaCrossChainSupply: BigInt!

  "Delta Redeemed"
  deltaRedeemed: BigInt!

  "Delta Deposited"
  deltaDeposited: BigInt!

  deposits: [PoolDeposit!]! @derivedFrom(field: "poolCreditSnapshotID")

  redeems: [PoolRedeem!]! @derivedFrom(field: "poolCreditSnapshotID")

  lastUpdateTimestamp: BigInt!

  lastUpdateBlockNumber: BigInt!
}

type PoolDeposit @entity(immutable: true) {
  "{Transaction hash}-{Log Index}"
  id: Bytes!

  "Account making the deposit"
  account: Account!

  "Pool that the credit was deposited in"
  pool: CarbonPool!

  "Credit deposited in the pool"
  credit: CarbonCredit!

  "Amount deposited in native units"
  amount: BigInt!

  "Block timestamp of the deposit"
  timestamp: BigInt!

  "{Pool}-{Day ID} for snapshot referencing"
  poolSnapshotID: CarbonPoolDailySnapshot!

  "{Pool}-{Credit}-{Day ID} for snapshot referencing"
  poolCreditSnapshotID: CarbonPoolCreditBalanceDailySnapshot!
}

type PoolRedeem @entity(immutable: true) {
  "{Transaction hash}-{Log Index}"
  id: Bytes!

  "Account making the redemption"
  account: Account!

  "Pool that the credit was redeemed from"
  pool: CarbonPool!

  "Credit redeemed from the pool"
  credit: CarbonCredit!

  "Amount redeemed in native units"
  amount: BigInt!

  "Block timestamp of the deposit"
  timestamp: BigInt!

  "{Pool}-{Day ID} for snapshot referencing"
  poolSnapshotID: CarbonPoolDailySnapshot!

  "{Pool}-{Credit}-{Day ID} for snapshot referencing"
  poolCreditSnapshotID: CarbonPoolCreditBalanceDailySnapshot!
}

##############################
##### Account level data #####
##############################

type Account @entity {
  "Ethereum address of the account"
  id: Bytes!

  totalRetirements: Int!

  ## Carbon Credit Activity ##
  bridges: [Bridge!]! @derivedFrom(field: "account")
  retiresBeneficiary: [Retire!]! @derivedFrom(field: "beneficiaryAddress")
  retiresInitiator: [Retire!]! @derivedFrom(field: "retiringAddress")

  ## Pool Activity ##
  poolDeposits: [PoolDeposit!]! @derivedFrom(field: "account")
  poolRedeems: [PoolRedeem!]! @derivedFrom(field: "account")

  ## Token Balance Activity ##
  holdings: [Holding!]! @derivedFrom(field: "account")
  holdingSnapshots: [HoldingDailySnapshot!]! @derivedFrom(field: "account")
}

type Holding @entity {
  "{Account}-{Token}"
  id: Bytes!

  "Account this belongs to"
  account: Account!

  "Token being held"
  token: Token!

  "Token ID being held"
  tokenId: BigInt

  "Amount currently held in native units"
  amount: BigInt!

  "amount currently held in tonnes"
  amountTonnes: BigDecimal!

  activeProvenanceRecords: [ProvenanceRecord!]!

  historicalProvenanceRecords: [ProvenanceRecord!]!

  "Timestamp last updated"
  lastUpdated: BigInt!
}

type HoldingDailySnapshot @entity {
  "{Account}-{Token}-{Days since Unix epoch}"
  id: Bytes!

  "Account this belongs to"
  account: Account!

  "Token being held"
  token: Token!

  "Day in Unix timestamp"
  timestamp: BigInt!

  "Amount currently held in native units"
  amount: BigInt!
}

type PuroIdMigration @entity {
  id: ID!
  tokenIds: [Bytes!]!
}

# Subgraph Versioning

type SubgraphVersion @entity(immutable: true)  {
  id: ID!
  schemaVersion: String!
  publishedVersion: String!
}

name: Release Carbonmark API
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    # Run on changes made to package.json
    branches:
      - staging
    paths:
      - "carbonmark-api/package.json"
    # Run on pushed carbonmark-api tags
    tags:
      - "carbonmark-api/*"

jobs:
  release-carbonmark-api:
    # block this action if initiated by this or other workflows
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    environment: Release-staging
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0 # We need this for fetching tags

      - name: Install jq
        run: sudo apt-get install jq

      - name: Set RELEASE_VERSION from tag or package.json
        run: |
          if [[ "${GITHUB_REF#refs/tags/carbonmark-api/}" != "$GITHUB_REF" ]]; then
            echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/carbonmark-api/}" >> $GITHUB_ENV
          else
            VERSION_HEAD=$(git show HEAD:carbonmark-api/package.json | jq -r .version)
            VERSION_PREV=$(git show HEAD^:carbonmark-api/package.json | jq -r .version)
            echo $VERSION_HEAD
            echo $VERSION_PREV
            if [[ "$VERSION_HEAD" == "$VERSION_PREV" ]]; then
              echo "Version in package.json has not changed. Exiting."
              exit 1
            fi
            version=v$(jq -r .version carbonmark-api/package.json)
            echo "RELEASE_VERSION=$version" >> $GITHUB_ENV
          fi

      - name: Debug RELEASE_VERSION
        run: echo $RELEASE_VERSION

      - name: Set up Git user
        run: |
          git config user.name ${{ secrets.PUSH_ACTOR }}
          git config user.email "${{ secrets.PUSH_ACTOR }}@users.noreply.github.com"

      - name: Create tag if none exists & triggered by package.json
        if: startsWith(github.ref, 'refs/heads/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag "carbonmark-api/${{ env.RELEASE_VERSION }}"
          git push origin "carbonmark-api/${{ env.RELEASE_VERSION }}"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: |
          url="$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})"
          vercel alias --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_TEAM_ID }} set "$url" ${{env.RELEASE_VERSION}}.api.carbonmark.com

      - name: Get previous tag
        id: previousTag
        run: |
          name=$(git --no-pager tag --sort=creatordate --merged ${{ github.ref_name }} | grep '^carbonmark-api/' | tail -2 | head -1)
          echo "previousTag=$name" >> $GITHUB_ENV

      - name: Generate changelog
        id: release_notes
        run: |
          RELEASE_NOTES=$(git log ${{ env.previousTag }}..${{ github.ref_name }} --pretty=format:"- %s (%an, %cd)" -- carbonmark-api)
          # All of this rubbish below is to remove new line characters so that GH doesn't try to execute our release log
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Debug changelog
        run: echo "${{ env.RELEASE_NOTES }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: carbonmark-api/${{ env.RELEASE_VERSION }}
          release_name: carbonmark-api-${{ env.RELEASE_VERSION }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
